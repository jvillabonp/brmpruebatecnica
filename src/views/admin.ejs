<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <title>Admin - BRM</title>
    <link href="https://cdn.jsdelivr.net/npm/simple-datatables@7.1.2/dist/style.min.css" rel="stylesheet" />
    <link href="https://startbootstrap.github.io/startbootstrap-sb-admin/css/styles.css" rel="stylesheet" />
    <script src="https://use.fontawesome.com/releases/v6.3.0/js/all.js" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" />
    <style>
        .pagination a {
            color: var(--bs-dark);
            padding: 10px 16px;
            text-decoration: none;
            transition: 0.5s;
            border: 1px solid var(--bs-secondary);
            margin: 0 4px;
        }

        .pagination a.active {
            background-color: var(--bs-primary);
            color: var(--bs-light);
            border: 1px solid var(--bs-secondary);
        }
    </style>
</head>
<body class="sb-nav-fixed">
    <div id="app">
        <nav class="sb-topnav navbar navbar-expand navbar-dark bg-dark">
            <!-- Navbar Brand-->
            <a class="navbar-brand ps-3" href="/">BRM</a>
            <!-- Sidebar Toggle-->
            <button class="btn btn-link btn-sm order-1 order-lg-0 me-4 me-lg-0" id="sidebarToggle" href="#!">
                <i class="fas fa-bars"></i>
            </button>
        </nav>
        <div id="layoutSidenav">
            <div id="layoutSidenav_nav">
                <nav class="sb-sidenav accordion sb-sidenav-dark" id="sidenavAccordion">
                    <div class="sb-sidenav-menu">
                        <div class="nav">
                            <div class="sb-sidenav-menu-heading">Core</div>
                            <a class="nav-link" href="/admin">
                                <div class="sb-nav-link-icon"><i class="fas fa-tachometer-alt"></i></div>
                                Dashboard
                            </a>
                            <a class="nav-link" href="/profile">
                                <div class="sb-nav-link-icon"><i class="fas fa-user"></i></div>
                                Perfil
                            </a>
                        </div>
                    </div>
                    <div class="sb-sidenav-footer">
                        <div class="small">Sessión iniciada como:</div>
                        {{ user.username }}
                    </div>
                </nav>
            </div>
            <div id="layoutSidenav_content">
                <main>
                    <div class="container-fluid px-4">
                        <h1 class="mt-4">Panel</h1>
                        <ol class="breadcrumb mb-4">
                            <li class="breadcrumb-item active">Acceso</li>
                        </ol>
                        <div class="row">
                            <div class="col-12">
                                <nav>
                                    <div class="nav nav-tabs" id="nav-tab" role="tablist">
                                        <button class="nav-link active" id="nav-home-tab" data-bs-toggle="tab" data-bs-target="#nav-home" type="button" role="tab" aria-controls="nav-home" aria-selected="true" @click="getUsers()">Usuarios</button>
                                        <button class="nav-link" id="nav-profile-tab" data-bs-toggle="tab" data-bs-target="#nav-profile" type="button" role="tab" aria-controls="nav-profile" aria-selected="false" @click="getProducts()">Productos</button>
                                        <button class="nav-link" id="nav-contact-tab" data-bs-toggle="tab" data-bs-target="#nav-contact" type="button" role="tab" aria-controls="nav-contact" aria-selected="false" @click="getPurchases()">Compras</button>
                                    </div>
                                </nav>
                                <div class="tab-content" id="nav-tabContent">
                                    <div class="tab-pane fade show active" id="nav-home" role="tabpanel" aria-labelledby="nav-home-tab">
                                        <div class="table-responsive">
                                            <table class="table">
                                                <thead>
                                                    <tr>
                                                        <th scope="col">Username</th>
                                                        <th scope="col">Correo electrónico</th>
                                                        <th scope="col">Rol</th>
                                                        <th scope="col">Acciones</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <tr v-for="u in users.data">
                                                        <td>{{ u.username }}</td>
                                                        <td>{{ u.email }}</td>
                                                        <td>{{ u.role }}</td>
                                                        <td>
                                                            <button class="btn btn-success" v-if="user.email != u.email" @click="editUser(u)">Editar</button>
                                                            <button class="btn btn-danger" v-if="user.email != u.email" @click="deleteUser(u)">Eliminar</button>
                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>

                                        <div class="col-12">
                                            <div class="pagination d-flex justify-content-center mt-5" v-if="users.totalPages > 1">
                                                <a href="javascript:void(0);" class="rounded" v-if="users.page > 1" v-on:click="getUsers(users.page - 1)">&laquo;</a>
                                                <a href="javascript:void(0);" class="rounded" v-bind:class="item == users.page ? 'active' : ''" v-for="item in users.totalPages" v-on:click="getUsers(item)">{{ item }}</a>
                                                <a href="javascript:void(0);" class="rounded" v-if="users.page < users.totalPages" v-on:click="getUsers(users.page + 1)">&raquo;</a>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="tab-pane fade" id="nav-profile" role="tabpanel" aria-labelledby="nav-profile-tab">
                                        <div class="row">
                                            <div class="container">
                                                <button class="btn btn-primary" @click="createOrUpdateProduct()">Registar producto</button>
                                            </div>
                                        </div>
                                        <div class="table-responsive">
                                            <table class="table">
                                                <thead>
                                                    <tr>
                                                        <th scope="col">Lote</th>
                                                        <th scope="col">Nombre</th>
                                                        <th scope="col">Stock</th>
                                                        <th scope="col">Valor</th>
                                                        <th scope="col">Acciones</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <tr v-for="product in products.data">
                                                        <td>{{ product.lotNumber }}</td>
                                                        <td>{{ product.name }}</td>
                                                        <td>{{ product.quantity }}</td>
                                                        <td>$ {{ new Intl.NumberFormat('es-CO').format(product.price) }}</td>
                                                        <td>
                                                            <button class="btn btn-success" @click="createOrUpdateProduct(product)">Editar</button>
                                                            <button class="btn btn-danger" @click="deleteProduct(product)">Eliminar</button>
                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>

                                        <div class="col-12">
                                            <div class="pagination d-flex justify-content-center mt-5" v-if="products.totalPages > 1">
                                                <a href="javascript:void(0);" class="rounded" v-if="products.page > 1" v-on:click="getProducts(products.page - 1)">&laquo;</a>
                                                <a href="javascript:void(0);" class="rounded" v-bind:class="item == products.page ? 'active' : ''" v-for="item in products.totalPages" v-on:click="getProducts(item)">{{ item }}</a>
                                                <a href="javascript:void(0);" class="rounded" v-if="products.page < products.totalPages" v-on:click="getProducts(products.page + 1)">&raquo;</a>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="tab-pane fade" id="nav-contact" role="tabpanel" aria-labelledby="nav-contact-tab">
                                        <div class="table-responsive">
                                            <table class="table">
                                                <thead>
                                                    <tr>
                                                        <th scope="col">Fecha de compra</th>
                                                        <th scope="col">Cliente</th>
                                                        <th scope="col">Cantidad de productos</th>
                                                        <th scope="col">Valor</th>
                                                        <th scope="col">Acciones</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <tr v-for="p in purchases.data">
                                                        <td>{{ formatDate(p.createdAt) }}</td>
                                                        <td>{{ p.User.username }}</td>
                                                        <td>{{ p.productQuantity }}</td>
                                                        <td>$ {{ new Intl.NumberFormat('es-CO').format(p.totalPrice) }}</td>
                                                        <td>
                                                            <button class="btn btn-success" @click="showProducts(p)">Ver productos</button>
                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>

                                        <div class="col-12">
                                            <div class="pagination d-flex justify-content-center mt-5" v-if="purchases.totalPages > 1">
                                                <a href="javascript:void(0);" class="rounded" v-if="purchases.page > 1" v-on:click="getPurchases(purchases.page - 1)">&laquo;</a>
                                                <a href="javascript:void(0);" class="rounded" v-bind:class="item == purchases.page ? 'active' : ''" v-for="item in purchases.totalPages" v-on:click="getPurchases(item)">{{ item }}</a>
                                                <a href="javascript:void(0);" class="rounded" v-if="purchases.page < purchases.totalPages" v-on:click="getPurchases(purchases.page + 1)">&raquo;</a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </main>
            </div>
        </div>

        <!-- Modals -->
        <div class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="modalEditUser" aria-hidden="true" id="modalEditUser">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">{{ userEdit.username ? 'Editar' : 'Registrar' }} usuario</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="container">
                            <form action="">
                                <div class="form-group">
                                    <label for="username">Username</label>
                                    <input type="text" id="username" class="form-control" v-bind:value="userEdit.username" readonly />
                                </div>
                                <div class="form-group">
                                    <label for="email">Correo electróncio</label>
                                    <input type="email" id="email" class="form-control" v-bind:value="userEdit.email" readonly />
                                </div>
                                <div class="form-group">
                                    <label for="role">Rol</label>
                                    <select id="role" class="form-control" v-model="userEdit.role">
                                        <option value>Seleccione...</option>
                                        <option v-bind:value="rol" v-for="rol in ['Admin', 'Client']">{{ rol }}</option>
                                    </select>
                                </div>
                            </form>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="$('#modalEditUser').modal('hide')">Cerrar</button>
                        <button type="button" class="btn btn-primary" @click="updateUser()">Guardar</button>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="modal" tabindex="-1" role="dialog" aria-hidden="true" id="productModal">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">{{ productEdit.id ? 'Editar' : 'Registrar' }} producto</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="container">
                            <form action="">
                                <div class="form-group">
                                    <label for="lot">N° de lote</label>
                                    <input type="text" id="lot" class="form-control" v-model="productEdit.lotNumber" v-bind:readonly="productEdit.id" />
                                </div>
                                <div class="form-group">
                                    <label for="name">Nombre</label>
                                    <input type="text" id="name" class="form-control" v-model="productEdit.name" />
                                </div>
                                <div class="form-group">
                                    <label for="price">Precio $</label>
                                    <input type="number" inputmode="numeric" id="price" class="form-control" v-model="productEdit.price" />
                                </div>
                                <div class="form-group">
                                    <label for="quantity">Cantidad</label>
                                    <input type="number" inputmode="numeric" id="quantity" class="form-control" v-model="productEdit.quantity" />
                                </div>
                                <div class="form-group">
                                    <label for="date">Fecha de ingreso</label>
                                    <input type="datetime-local" id="date" class="form-control" v-bind:value="formatDate(productEdit.entryDate, 'YYYY-MM-DD HH:mm:ss')" readonly v-if="productEdit.id" />
                                    <input type="datetime-local" id="date" class="form-control" v-model="productEdit.entryDate" v-else />
                                </div>
                            </form>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="$('#productModal').modal('hide')">Cerrar</button>
                        <button type="button" class="btn btn-primary" @click="productEdit.id ? updateProduct() : createProduct()">Guardar</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="modalPurchase" aria-hidden="true" id="purchaseModal">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Productos de la compra #{{ purchase.id }}</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="container">
                            <div class="table-responsive">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th scope="col">Producto</th>
                                            <th scope="col">Cantidad</th>
                                            <th scope="col">Valor unitario</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr v-for="(product, index) in purchase.Products">
                                            <td>{{ product.name }}</td>
                                            <td>{{ product.ProductPurchases.quantity }}</td>
                                            <td>$ {{ new Intl.NumberFormat('es-CO').format(product.ProductPurchases.unitValue) }}</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="$('#purchaseModal').modal('hide')">Cerrar</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>
    <script src="https://startbootstrap.github.io/startbootstrap-sb-admin/js/scripts.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/vue@2.7.16/dist/vue.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.5/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.30.1/moment.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.30.1/locale/es-mx.min.js"></script>

    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js"></script>

    <script>
        new Vue({
            el: '#app',
            data: {
                products: {},
                users: {},
                purchases: {},
                authToken: null,
                user: {},
                userEdit: {},
                productEdit: {},
                purchase: {}
            },
            methods: {                
                getProfile: function (page = null) {
                    axios.get(`/api/profile?page=${page != null ? page : 1}`, {
                        headers: {
                            'Authorization': `Bearer ${this.authToken}`
                        }
                    })
                    .then((res) => {
                        this.user = res.data.user;
                        if (this.user.role != 'Admin') {
                            window.location = '/profile';
                        }
                    })
                    .catch((err) => {
                        if (err.response.status == 401) {
                            localStorage.removeItem('authToken');
                            Swal.fire({
                                title: 'Inicia sesión nuevamente'
                            })
                            .then((confirm) => {
                                if (confirm.isConfirmed) {
                                    window.location = '/login';
                                }
                            });
                        }
                    });
                },

                formatDate: function (date, format = 'LLLL') {
                    const formated = moment(date).format(format);
                    return formated;
                },

                getUsers: function (page = null) {
                    axios.get(`/api/users?page=${page != null ? page : 1}`, {
                        headers: {
                            'Authorization': `Bearer ${this.authToken}`
                        }
                    })
                    .then((res) => {
                        this.users = res.data;
                    })
                    .catch((err) => {
                        const { errors } = err.response.data;
                        let html = '<ul>';
                        for (error in errors) {
                            errors[error].map((v) => html += `<li class="text-danger">${v}</li>`);
                        }
                        html += '</ul>';
                        Swal.fire({
                            title: err.response.data.message,
                            html: html,
                            icon: 'error'
                        });
                    })
                },

                getPurchases: function (page = null) {
                    axios.get(`/api/purchases?page=${page != null ? page : 1}`, {
                        headers: {
                            'Authorization': `Bearer ${this.authToken}`
                        }
                    })
                    .then((res) => {
                        this.purchases = res.data;
                    });
                },

                getProducts: function (page = null) {
                    axios.get(`/api/products?page=${page != null ? page : 1}`, {
                        headers: {
                            'Authorization': `Bearer ${this.authToken}`
                        }
                    })
                    .then((res) => {
                        this.products = res.data;
                    })
                },

                editUser: function (user) {
                    this.userEdit = user;
                    $("#modalEditUser").modal('show');
                },

                updateUser: function () {
                    Swal.fire({
                        title: 'Actualizando...',
                        showConfirmButton: false,
                        allowEscapeKey: false,
                        allowOutsideClick: false,
                        willOpen: () => Swal.showLoading()
                    });

                    axios.patch(`/api/users/${this.userEdit.id}`, {
                        role: this.userEdit.role
                    }, {
                        headers: {
                            'Authorization': `Bearer ${this.authToken}`
                        }
                    })
                    .then((res) => {
                        this.userEdit = {};
                        this.getUsers();
                        Swal.fire(res.data.message, '', 'success')
                            .then(() => $("#modalEditUser").modal('hide'));
                    })
                    .catch((err) => {
                        const { errors } = err.response.data;
                        let html = '<ul>';
                        for (error in errors) {
                            errors[error].map((v) => html += `<li class="text-danger">${v}</li>`);
                        }
                        html += '</ul>';
                        Swal.fire({
                            title: err.response.data.message,
                            html: html,
                            icon: 'error'
                        });
                    });
                },

                deleteUser: function (user) {
                    Swal.fire({
                        title: '¿Desea eliminar este usuario?',
                        text: 'Esta acción no se puede revertir',
                        allowOutsideClick: false,
                        allowEscapeKey: false,
                        icon: 'error',
                        cancelButtonText: 'Cancelar',
                        showCancelButton: true,
                        confirmButtonText: 'Eliminar',
                        confirmButtonColor: '#dc3545'
                    })
                    .then((res) => {
                        if (res.isConfirmed) {
                            Swal.fire({
                                title: 'Eliminando',
                                showConfirmButton: false,
                                allowEscapeKey: false,
                                allowOutsideClick: false,
                                willOpen: () => Swal.showLoading()
                            });

                            axios.delete(`/api/users/${user.id}`, {
                                headers: {
                                    'Authorization': `Bearer ${this.authToken}`
                                }
                            })
                            .then((res) => {
                                this.getUsers();
                                Swal.fire(res.data.message, '', 'success');
                            })
                            .catch((err) => {
                                const { errors } = err.response.data;
                                let html = '<ul>';
                                for (error in errors) {
                                    errors[error].map((v) => html += `<li class="text-danger">${v}</li>`);
                                }
                                html += '</ul>';
                                Swal.fire({
                                    title: err.response.data.message,
                                    html: html,
                                    icon: 'error'
                                });
                            })
                        }
                    })
                },

                createOrUpdateProduct: function (product = {}) {
                    this.productEdit = product;
                    $("#productModal").modal('show');
                },

                createProduct: function () {
                    Swal.fire({
                        title: 'Registrando...',
                        showConfirmButton: false,
                        allowEscapeKey: false,
                        allowOutsideClick: false,
                        willOpen: () => Swal.showLoading()
                    });

                    axios.post(`/api/products`, this.productEdit, {
                        headers: {
                            'Authorization': `Bearer ${this.authToken}`
                        }
                    })
                    .then((res) => {
                        this.getProducts();
                        this.productEdit = {};
                        Swal.fire(res.data.message, '', 'success');
                        $("#productModal").modal('hide');
                    })
                    .catch((err) => {
                        const { errors } = err.response.data;
                        let html = '<ul>';
                        for (error in errors) {
                            errors[error].map((v) => html += `<li class="text-danger">${v}</li>`);
                        }
                        html += '</ul>';
                        Swal.fire({
                            title: err.response.data.message,
                            html: html,
                            icon: 'error'
                        });
                    });
                },

                updateProduct: function () {
                    Swal.fire({
                        title: 'Actualizando...',
                        showConfirmButton: false,
                        allowEscapeKey: false,
                        allowOutsideClick: false,
                        willOpen: () => Swal.showLoading()
                    });

                    axios.patch(`/api/products/${this.productEdit.id}`, {
                        name: this.productEdit.name,
                        price: this.productEdit.price,
                        quantity: this.productEdit.quantity
                    }, {
                        headers: {
                            'Authorization': `Bearer ${this.authToken}`
                        }
                    })
                    .then((res) => {
                        this.getProducts();
                        this.productEdit = {};
                        Swal.fire(res.data.message, '', 'success')
                            .then(() => $("#productModal").modal('hide'));
                    })
                    .catch((err) => {
                        const { errors } = err.response.data;
                        let html = '<ul>';
                        for (error in errors) {
                            errors[error].map((v) => html += `<li class="text-danger">${v}</li>`);
                        }
                        html += '</ul>';
                        Swal.fire({
                            title: err.response.data.message,
                            html: html,
                            icon: 'error'
                        });
                    });
                },
                
                deleteProduct: function (product) {
                    Swal.fire({
                        title: '¿Desea eliminar este producto?',
                        text: 'Esta acción no se puede revertir',
                        allowOutsideClick: false,
                        allowEscapeKey: false,
                        icon: 'error',
                        cancelButtonText: 'Cancelar',
                        showCancelButton: true,
                        confirmButtonText: 'Eliminar',
                        confirmButtonColor: '#dc3545'
                    })
                    .then((res) => {
                        if (res.isConfirmed) {
                            Swal.fire({
                                title: 'Eliminando...',
                                showConfirmButton: false,
                                allowEscapeKey: false,
                                allowOutsideClick: false,
                                willOpen: () => Swal.showLoading()
                            });

                            axios.delete(`/api/products/${product.id}`, {
                                headers: {
                                    'Authorization': `Bearer ${this.authToken}`
                                }
                            })
                            .then((res) => {
                                this.getProducts();
                                Swal.fire(res.data.message, '', 'success');
                            })
                            .catch((err) => {
                                const { errors } = err.response.data;
                                let html = '<ul>';
                                for (error in errors) {
                                    errors[error].map((v) => html += `<li class="text-danger">${v}</li>`);
                                }
                                html += '</ul>';
                                Swal.fire({
                                    title: err.response.data.message,
                                    html: html,
                                    icon: 'error'
                                });
                            })
                        }
                    })
                },

                showProducts: function (purchase) {
                    this.purchase = purchase;
                    $("#purchaseModal").modal('show');
                },

                logOut: function () {
                    localStorage.removeItem('authToken');
                    this.authToken = null;
                    window.location = '/login';
                }
            },
            mounted() {
                moment().locale('es');

                const authToken = localStorage.getItem('authToken');
                if (!authToken) {
                    window.location = '/login';
                } else {
                    this.authToken = authToken;
                    const products = JSON.parse(localStorage.getItem('cart'));
                    this.products = products || [];
                    this.getProfile();
                    this.getUsers();
                }                
            }
        });
    </script>
</body>
</html>
